# -*- coding: utf-8 -*-
"""lda_visualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fxWEB47_ToFzmDE8UZg7YOJRQgaUl2cO
"""

import pickle
import pyLDAvis.gensim_models as gensimvis
import pyLDAvis
from gensim.models.coherencemodel import CoherenceModel
import matplotlib.pyplot as plt

# 모델 시각화
lda_visualization = gensimvis.prepare(model, corpus, dictionary, sort_topics=False)

# LDA 시각화 HTML 파일로 저장
pyLDAvis.save_html(lda_visualization, 'place.html')

import pyLDAvis.gensim_models as gensimvis
import pyLDAvis

# LDA 모델 준비 및 시각화 생성
lda_visualization = gensimvis.prepare(model, corpus, dictionary, sort_topics=False)

# HTML 파일로 저장
pyLDAvis.save_html(lda_visualization, '/content/lda_visualization.html')

from IPython.display import IFrame

# 생성된 HTML 파일을 IFrame으로 표시
# IFrame()은 HTML 파일을 노트북에서 직접 표시할 수 있도록 해주는 Jupyter의 디스플레이 기능입니다.
IFrame('/content/lda_visualization.html', width=800, height=600)

from google.colab import files

# HTML 파일 다운로드
files.download('/content/lda_visualization.html')

all = pd.read_csv("all.csv")

all.head()

# 단어 열의 단어들을 '\t' 기준으로 분리
all['단어'] = all['단어'].apply(lambda x: x.split('\n') if isinstance(x, str) else [])

all.head()

# 사용자 입력 단어로 장소 검색
def search_places_by_word(word):
    """
    입력된 단어를 포함하는 장소 목록을 반환합니다.
    """
    result = all[all['단어'].apply(lambda words: word in words)]
    if result.empty:
        print(f"'{word}'를 포함하는 장소를 찾을 수 없습니다.")
    else:
        print(f"'{word}'와(과) 관련된 장소:")
        print(result['장소'].to_list())

# 사용자 입력 받아서 검색
while True:
    user_input = input("검색할 단어를 입력하세요 (종료하려면 '종료' 입력): ").strip()
    if user_input.lower() == '종료':
        print("프로그램을 종료합니다.")
        break
    search_places_by_word(user_input)