# -*- coding: utf-8 -*-
"""lda_model_tuning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/172TSB5Z2eYuTji-17kNoKGhWN6dQdBYD
"""

from sklearn.model_selection import ParameterGrid
from gensim.models import LdaModel
from gensim.models.coherencemodel import CoherenceModel

# 파라미터 그리드 정의
param_grid = {
    'num_topics': [2, 3, 4, 5, 6],
    'chunksize': [1000, 2000, 3000],
    'passes': [10, 20, 30],
    'iterations': [100, 200, 300]
}

# 파라미터 그리드의 모든 조합을 반복
best_model = None
best_coherence = -1
best_params = {}

for params in ParameterGrid(param_grid):

    # LDA 모델 학습
    model = LdaModel(
        corpus=corpus,
        id2word=dictionary,
        num_topics=params['num_topics'],
        passes=params['passes'],
        iterations=params['iterations'],
        chunksize=params['chunksize'],
        alpha='auto',
        eta='auto'
    )

    # 모델 평가 (coherence score 계산)
    coherence_model = CoherenceModel(model=model, texts=processed_data, dictionary=dictionary, coherence='c_v')
    coherence_score = coherence_model.get_coherence()

    # 최적의 모델 저장
    if coherence_score > best_coherence:
        best_coherence = coherence_score
        best_model = model
        best_params = params  # 최적 파라미터 저장

# 최적 모델 및 파라미터 출력
print(f"Best Coherence Score: {best_coherence:.4f}")
print(f"Best Parameters: {best_params}")

# LDA 모델 파라미터 설정
num_topics = 4 # 추출할 주제의 수
chunksize = 2000 # 한 번에 처리할 문서의 수 (보통 1000~2000 정도가 좋은 시작점)
passes = 20 # 전체 데이터셋 몇 번 반복해서 학습할지 (10~20 정도가 일반적)
iterations = 200 # 각 문서가 주제를 학습할 때 반복할 횟수
eval_every = None # 모델을 평가할 주기의 설정 (None = 평가 x)

temp = dictionary[0]
id2word = dictionary.id2token

# LDA 모델 학습
model = LdaModel(
    corpus=corpus,
    id2word=id2word,
    chunksize=chunksize,
    alpha='auto',
    eta='auto',
    iterations=iterations,
    num_topics=num_topics,
    passes=passes,
    eval_every=eval_every
)

# 상위 주제 추출 - 학습된 모델을 사용하여 문서 집합에서 가장 중요한 주제들 추출
top_topics = model.top_topics(corpus)

# 주제 일관성 계산
avg_topic_coherence = sum([t[1] for t in top_topics]) / num_topics
print('Average topic coherence: %.4f.' % avg_topic_coherence)

from pprint import pprint
pprint(top_topics)